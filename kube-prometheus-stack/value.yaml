fullnameOverride: prometheus

defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: true
    configReloaders: true
    general: true
    k8s: true
    kubeApiserverAvailability: true
    kubeApiserverBurnrate: true
    kubeApiserverHistogram: true
    kubeApiserverSlos: true
    kubelet: true
    kubeProxy: true
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeScheduler: true
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true


alertmanager:
  fullnameOverride: alertmanager
  enabled: true
  ingress:
    enabled: false
  config:
    global:
      # Slack API URL for sending notifications
      slack_api_url: ''
      http_config:
        tls_config:
          # Skip TLS verification to allow self-signed certificates
          insecure_skip_verify: true
    route:
      # Default receiver for all alerts
      receiver: 'slack-default'
      # Group alerts by these labels
      group_by:
        - alertname
        - cluster
        - service
        - severity
        - instance
      # Wait this long before sending a notification for a new group of alerts
      group_wait: 30s
      # Wait this long before sending a notification for an existing group of alerts
      group_interval: 5m
      # Wait this long before repeating a notification for a group of alerts
      repeat_interval: 12h
      # Define routes for different groups of alerts
      routes:
        # Send warnings and critical alerts to the 'slack-warn-critical' receiver
        - receiver: 'slack-warn-critical'
          match_re:
            severity: 'warning|critical'
          # Continue processing alerts after sending them to this receiver
          continue: true
    receivers:
      # Define a null receiver to discard alerts that don't match any route
      - name: 'null'
      # Define the default Slack receiver
      - name: 'slack-default'
        slack_configs:
          # Send notifications for resolved alerts as well as active alerts
          send_resolved: true
          # Send notifications to this Slack channel
          channel: '#k8s-alerts'
          # Define the message text for the notification
          text: |-
            {{ range .Alerts }}
            *{{ .Labels.alertname }}*
            {{ if ne .Labels.service "" }}• *Service:* {{ .Labels.service }}
            {{ end }}{{ if ne .Labels.cluster "" }}• *Cluster:* {{ .Labels.cluster }}
            {{ end }}{{ if ne .Labels.instance "" }}• *Instance:* {{ .Labels.instance }}
            {{ end }}• *Severity:* {{ .Labels.severity }}
            {{ if ne .Labels.namespace "" }}• *Namespace:* {{ .Labels.namespace }}
            {{ end }}• *Description:*
            ```
            {{ .Annotations.description }}
            ```
            {{ if ne .Annotations.runbook_url "" }}• *Runbook:* <{{ .Annotations.runbook_url }}|{{ .Annotations.runbook_url }}>
            {{ end }}
            {{ end }}
      # Define a Slack receiver for warnings and critical alerts
      - name: 'slack-warn-critical'
        slack_configs:
          # Send notifications for resolved alerts as well as active alerts
          send_resolved: true
          # Send notifications to this Slack channel
          channel: '#k8s-alerts'
          # Define the message text for the notification
          text: |-
            {{ range .Alerts }}
            {{ if eq .Labels.severity "critical" }}:rotating_light:{{ else if eq .Labels.severity "warning" }}:warning:{{ end }} *{{ .Labels.alertname }}*
            {{ if ne .Labels.service "" }}• *Service:* {{ .Labels.service }}
            {{ end }}{{ if ne .Labels.cluster "" }}• *Cluster:* {{ .Labels.cluster }}
            {{ end }}{{ if ne .Labels.instance "" }}• *Instance:* {{ .Labels.severity }}



grafana:
  enabled: true
  fullnameOverride: grafana
  forceDeployDatasources: false
  forceDeployDashboards: false
  defaultDashboardsEnabled: true
  defaultDashboardsTimezone: utc
  serviceMonitor:
    enabled: true
  admin:
    existingSecret: grafana-admin-credentials
    userKey: admin-user
    passwordKey: admin-password

kubeApiServer:
  enabled: true

kubelet:
  enabled: true
  serviceMonitor:
    metricRelabelings:
      - action: replace
        sourceLabels:
          - node
        targetLabel: instance

kubeControllerManager:
  enabled: true
  endpoints: # ips of servers 
    - 10.100.10.11
    - 10.100.10.12
    - 10.100.10.13

coreDns:
  enabled: true

kubeDns:
  enabled: false

kubeEtcd:
  enabled: true
  endpoints: # ips of servers
    - 10.100.10.11
    - 10.100.10.12
    - 10.100.10.13
  service:
    enabled: true
    port: 2381
    targetPort: 2381

kubeScheduler:
  enabled: true
  endpoints: # ips of servers
    - 10.100.10.11
    - 10.100.10.12
    - 10.100.10.13

kubeProxy:
  enabled: true
  endpoints: # ips of servers
    - 10.100.10.11
    - 10.100.10.12
    - 10.100.10.13

kubeStateMetrics:
  enabled: true

kube-state-metrics:
  fullnameOverride: kube-state-metrics
  selfMonitor:
    enabled: true
  prometheus:
    monitor:
      enabled: true
      relabelings:
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels:
            - __meta_kubernetes_pod_node_name
          targetLabel: kubernetes_node

nodeExporter:
  enabled: true
  serviceMonitor:
    relabelings:
      - action: replace
        regex: (.*)
        replacement: $1
        sourceLabels:
          - __meta_kubernetes_pod_node_name
        targetLabel: kubernetes_node

prometheus-node-exporter:
  fullnameOverride: node-exporter
  podLabels:
    jobLabel: node-exporter
  extraArgs:
    - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
    - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
  service:
    portName: http-metrics
  prometheus:
    monitor:
      enabled: true
      relabelings:
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels:
            - __meta_kubernetes_pod_node_name
          targetLabel: kubernetes_node
  resources:
    requests:
      memory: 512Mi
      cpu: 250m
    limits:
      memory: 2048Mi

prometheusOperator:
  enabled: true
  prometheusConfigReloader:
    resources:
      requests:
        cpu: 200m
        memory: 50Mi
      limits:
        memory: 100Mi

prometheus:
  enabled: true
  prometheusSpec:
    replicas: 3
    replicaExternalLabelName: "replica"
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    retention: 6h
    enableAdminAPI: true
    walCompression: true
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: longhorn
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 5Gi

thanosRuler:
  enabled: false
